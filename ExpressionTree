public class ExpressionTree
        extends AbstractExpressionTree {

    Node root = null;

    @Override
    public double solveExpression(String expression) throws ArithmeticException {
        double result;
        ExpressionStack<Double> numbers = new ExpressionStack<>();
        root = generateTree(expression);
        System.out.print("postfix notation: ");
        printPostOrder(root, numbers);
        System.out.println();
        result = numbers.pop();
        return result;
    }

    private Node generateTree(String expression) {
        if (isSingleNumber(expression) && !isBetweenParenthesis(expression)) return new Node(expression);
        else {
            Node pivot = new Node(null);
            for (int hierarchy = 1; hierarchy < 3; hierarchy++) {
                if (pivot.value == null) {
                    while (isSingleExpression(expression) && isBetweenParenthesis(expression)) { // content.length() > 1
                        expression = expression.substring(1, expression.length() - 1);
                    }
                    if (isSingleNumber(expression)) return new Node(expression);
                    selectPivot(expression, pivot, hierarchy);
                }
            }
            pivot.left = generateTree(expression.substring(0, pivot.position));
            pivot.right = generateTree(expression.substring(pivot.position + 1));
            return pivot;
        }
    }

    private void selectPivot(String expression, Node pivot, int hierarchy) {
        int countOpen = 0;
        int countClosed = 0;
        for (int i = 0; i < expression.length(); i++) {
            if (expression.charAt(i) == '(') {
                countOpen++;
            } else if (expression.charAt(i) == ')') {
                countClosed++;
            } else if (countOpen == countClosed) {
                if (isOperator(expression.charAt(i)) && getHierarchy(expression.charAt(i)) == hierarchy) {
                    pivot.value = expression.substring(i, i + 1);
                    pivot.position = i;
                }
            }
        }
    }

    private void printPostOrder(Node node, ExpressionStack<Double> numbers) {
        if (node == null) return;
        printPostOrder(node.left, numbers);
        printPostOrder(node.right, numbers);
        solvePostfix(node.value, numbers);
        System.out.print(node.value + " ");
    }

    private void solvePostfix(String nodeContent, ExpressionStack<Double> numbers) {
        if (isOperator(nodeContent.charAt(0)) && !numbers.isEmpty()) {
            double result = 0;
            double b = numbers.pop();
            double a = numbers.pop();
            switch (nodeContent) {
                case "+":
                    result = a + b;
                    break;
                case "-":
                    result = a - b;
                    break;
                case "*":
                    result = a * b;
                    break;
                case "/":
                    result = a / b;
                    break;
                default:
                    break;
            }
            numbers.push(result);
        } else {
            double doubleValue = Double.parseDouble(nodeContent);
            numbers.push(doubleValue);
        }
    }

    public boolean areParenthesisBalanced(String expression) {
        int countOpen = 0;
        int countClose = 0;
        for (char c : expression.toCharArray()) {
            if (c == '(') {
                countOpen++;
            }
            if (c == ')') {
                countClose++;
            }
        }
        return countOpen == countClose;
    }

    private boolean isSingleExpression(String expression) {
        int countOpen = 0;
        int countClosed = 0;
        for (int i = 0; i < expression.length(); i++) {
            if (expression.toCharArray()[i] == '(') {
                countOpen++;
            }
            if (expression.toCharArray()[i] == ')') {
                countClosed++;
            }
            if (countOpen == countClosed && i != expression.length() - 1) {
                return false;
            }
        }
        return countOpen == countClosed;
    }

    private int getHierarchy(char character) {
        return switch (character) {
            case '+', '-' -> 1;
            case '*', '/' -> 2;
            default -> 0;
        };
    }

    private boolean isSingleNumber(String expression) {
        for (char character : expression.toCharArray()) {
            if (isOperator(character)) return false;
        }
        return true;
    }

    private boolean isBetweenParenthesis(String expression) {
        return expression.charAt(0) == '(' && expression.charAt(expression.length() - 1) == ')';
    }

    private boolean isOperator(char value) {
        return value == '+' || value == '-' || value == '*' || value == '/';
    }

    public boolean isOperable(String expression) {
        for (char character : expression.toCharArray()) {
            if (!isOperator(character) && character != '(' && character != ')') {
                if (!isValidNumber(character)) return false;
            }
        }
        return true;
    }

    private boolean isValidNumber(char character) {
        return character == '0' || character == '1' || character == '2' || character == '3' || character == '4' ||
                character == '5' || character == '6' || character == '7' || character == '8' || character == '9';
    }

    private static class Node {
        String value;
        int position;
        Node left;
        Node right;

        protected Node(String value) {
            this.value = value;
            position = 0;
            left = null;
            right = null;
        }
    }
}
